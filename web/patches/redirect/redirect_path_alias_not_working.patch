diff --git a/redirect.module b/redirect.module
index f89c694657..f5969e5ae4 100644
--- a/redirect.module
+++ b/redirect.module
@@ -408,7 +408,7 @@ function redirect_redirect_operations() {
  * Ajax callback for the redirect link widget.
  */
 function redirect_source_link_get_status_messages(array $form, FormStateInterface $form_state) {
-  return $form['redirect_source']['widget'][0]['status_box'];
+  return $form['redirect_source']['widget'][0];
 }
 
 /**
diff --git a/src/Plugin/Field/FieldWidget/RedirectSourceWidget.php b/src/Plugin/Field/FieldWidget/RedirectSourceWidget.php
index 5637b58663..d08b9c9898 100644
--- a/src/Plugin/Field/FieldWidget/RedirectSourceWidget.php
+++ b/src/Plugin/Field/FieldWidget/RedirectSourceWidget.php
@@ -2,14 +2,19 @@
 
 namespace Drupal\redirect\Plugin\Field\FieldWidget;
 
-use Drupal\Component\Utility\NestedArray;
 use Drupal\Component\Utility\UrlHelper;
+use Drupal\Core\Field\FieldDefinitionInterface;
 use Drupal\Core\Field\FieldItemListInterface;
 use Drupal\Core\Field\WidgetBase;
+use Drupal\Core\Plugin\ContainerFactoryPluginInterface;
 use Drupal\Core\Url;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Path\AliasManagerInterface;
+use Drupal\redirect\RedirectRepository;
+use Symfony\Component\DependencyInjection\ContainerInterface;
 use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
 use Symfony\Component\Routing\Exception\ResourceNotFoundException;
+use Symfony\Component\Routing\Matcher\RequestMatcherInterface;
 
 /**
  * Plugin implementation of the 'link' widget for the redirect module.
@@ -29,7 +34,54 @@
  *   }
  * )
  */
-class RedirectSourceWidget extends WidgetBase {
+class RedirectSourceWidget extends WidgetBase implements ContainerFactoryPluginInterface {
+  
+  /**
+   * The path alias manager.
+   *
+   * @var \Drupal\Core\Path\AliasManagerInterface
+   */
+  protected $aliasManager;
+
+  /**
+   * The redirect repository service.
+   *
+   * @var \Drupal\redirect\RedirectRepository
+   */
+  protected $redirectRepository;
+
+  /**
+   * The dynamic router service.
+   *
+   * @var \Symfony\Component\Routing\Matcher\RequestMatcherInterface
+   */
+  protected $router;
+
+  /**
+   * {@inheritdoc}
+   */
+  public function __construct($plugin_id, $plugin_definition, FieldDefinitionInterface $field_definition, array $settings, array $third_party_settings, AliasManagerInterface $alias_manager, RedirectRepository $redirect_repository, RequestMatcherInterface $router) {
+    parent::__construct($plugin_id, $plugin_definition, $field_definition, $settings, $third_party_settings);
+    $this->aliasManager = $alias_manager;
+    $this->redirectRepository = $redirect_repository;
+    $this->router = $router;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container, array $configuration, $plugin_id, $plugin_definition) {
+    return new static(
+      $plugin_id,
+      $plugin_definition,
+      $configuration['field_definition'],
+      $configuration['settings'],
+      $configuration['third_party_settings'],
+      $container->get('path.alias_manager'),
+      $container->get('redirect.repository'),
+      $container->get('router')
+    );
+  }
 
   /**
    * {@inheritdoc}
@@ -39,6 +91,9 @@ public function formElement(FieldItemListInterface $items, $delta, array $elemen
     if ($items[$delta]->query) {
       $default_url_value .= '?' . http_build_query($items[$delta]->query);
     }
+
+    $element['#prefix'] = '<div id="redirect-path-wrapper">';
+    $element['#suffix'] = '</div>';    
     $element['path'] = [
       '#type' => 'textfield',
       '#title' => $this->t('Path'),
@@ -61,11 +116,21 @@ public function formElement(FieldItemListInterface $items, $delta, array $elemen
       if ($source_path) {
         $source_path = trim($source_path);
 
+        // Convert alias to system path if it is found.
+        $source_path_trimmed = ltrim($source_path, '/');
+        $system_path = ltrim($this->aliasManager->getPathByAlias('/' . $source_path_trimmed), '/');
+        if ($source_path_trimmed != $system_path) {
+          $message = $this->t('The path %path is an alias and has been converted to its source path %system_path.', ['%path' => $source_path_trimmed, '%system_path' => $system_path]);
+          $element['status_box'][]['#markup'] = '<div class="messages messages--warning">' . $message . '</div>';
+
+          $source_path = $element['path']['#value'] = $system_path;
+        }
+        
         // Warning about creating a redirect from a valid path.
         // @todo - Hmm... exception driven logic. Find a better way how to
         //   determine if we have a valid path.
         try {
-          \Drupal::service('router')->match('/' . $form_state->getValue(['redirect_source', 0, 'path']));
+          $this->router->match('/' . $source_path);
           $element['status_box'][]['#markup'] = '<div class="messages messages--warning">' . $this->t('The source path %path is likely a valid path. It is preferred to <a href="@url-alias">create URL aliases</a> for existing paths rather than redirects.',
               ['%path' => $source_path, '@url-alias' => Url::fromRoute('path.admin_add')->toString()]) . '</div>';
         }
@@ -80,9 +145,7 @@ public function formElement(FieldItemListInterface $items, $delta, array $elemen
         $parsed_url = UrlHelper::parse($source_path);
         $path = isset($parsed_url['path']) ? $parsed_url['path'] : NULL;
         if (!empty($path)) {
-          /** @var \Drupal\redirect\RedirectRepository $repository */
-          $repository = \Drupal::service('redirect.repository');
-          $redirects = $repository->findBySourcePath($path);
+          $redirects = $this->redirectRepository->findBySourcePath($path);
           if (!empty($redirects)) {
             $redirect = array_shift($redirects);
             $element['status_box'][]['#markup'] = '<div class="messages messages--warning">' . $this->t('The base source path %source is already being redirected. Do you want to <a href="@edit-page">edit the existing redirect</a>?', ['%source' => $source_path, '@edit-page' => $redirect->toUrl('edit-form')->toString()]) . '</div>';
@@ -92,7 +155,7 @@ public function formElement(FieldItemListInterface $items, $delta, array $elemen
 
       $element['path']['#ajax'] = [
         'callback' => 'redirect_source_link_get_status_messages',
-        'wrapper' => 'redirect-link-status',
+        'wrapper' => 'redirect-path-wrapper',
       ];
     }
 
