<?php

/**
 * @file
 * Install, update and uninstall functions for the NSMM Global installation
 *   profile.
 */

use Drupal\block\Entity\Block;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\user\Entity\User;
use Drupal\user\RoleInterface;
use Drupal\taxonomy\Entity\Term;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\Core\Database\Database;

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 *
 * @see system_install()
 */
function soen_install() {
  // Set front page to "node".
  \Drupal::configFactory()->getEditable('system.site')->set('page.front', '/node')->save(TRUE);

  // Allow visitor account creation with administrative approval.
  $user_settings = \Drupal::configFactory()->getEditable('user.settings');
  $user_settings->set('register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL)->save(TRUE);

  // Assign user 1 the "administrator" role.
  $user = User::load(1);
  $user->roles[] = 'administrator';
  $user->save();

  // We install some menu links, so we have to rebuild the router, to ensure the
  // menu links are valid.
  \Drupal::service('router.builder')->rebuildIfNeeded();

  // Allow all users to use search.
  user_role_grant_permissions(RoleInterface::ANONYMOUS_ID, ['search content']);
  user_role_grant_permissions(RoleInterface::AUTHENTICATED_ID, ['search content']);

  // Enable the admin theme.
  \Drupal::configFactory()->getEditable('node.settings')->set('use_admin_theme', TRUE)->save(TRUE);
}

// ###
// Function to remove orphaned entities
// ###
//
// function soen_update_8001() {
//   $paragraphs = [];
//   // Delete all instances of the paragraph type first.
//   $storage_manager = \Drupal::entityTypeManager()->getStorage('paragraph');
//   $ids             = $storage_manager->getQuery()
//    ->condition('type', 'text_box_with_quote')
//    ->execute();

//   if (!empty($ids)) {
//    $paragraphs = Paragraph::loadMultiple($ids);
//    $storage_manager->delete($paragraphs);
//   }

//   $paragraph_type = \Drupal::entityTypeManager()
//    ->getStorage('paragraphs_type')
//    ->load('text_box_with_quote');
//   if ($paragraph_type) {
//    $paragraph_type->delete();
//   }

//   return t('@count  Text Block with Quote paragraph instances deleted. Text Block with Quote type has been deleted', ['@count' => count($paragraphs)]);
// }